{"version":3,"file":"static/js/823.d327eae3.chunk.js","mappings":"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","sources":["components/pagination/index.tsx","pages/category/index.tsx","utils/prompt.ts"],"sourcesContent":["import { ConfigProvider, Pagination } from 'antd'\nimport React, { useEffect, useState } from 'react'\nimport zhCN from 'antd/es/locale/zh_CN';\nconst MyPagination = (props: any) => {\n  // 分页总数\n  const [total, setTotal] = useState(0)\n  // 当前第几页\n  const [currentPage, setCurrentPage] = useState(0)\n  // 每页显示条数\n  const [pageSize, setPageSize] = useState(0)\n  useEffect(() => {\n    setTotal(props.total)\n    setCurrentPage(props.currentPage)\n    setPageSize(props.pageSize)\n  }, [props])\n\n  const onChangePage = (page: number, pageSize: number) => {\n    // 将切换的页码参数传递过去\n    props.onChange(page, pageSize)\n  }\n  return (\n    <div>\n      {/* 中文语言包 */}\n      < ConfigProvider locale={zhCN} >\n        <Pagination\n          style={{ textAlign: 'center', paddingTop: '10px', borderTop: '2px solid #fafafa' }}\n          current={currentPage} // 当前页\n          pageSize={pageSize} // 每页条数\n          total={total} // 数据总数\n          pageSizeOptions={[5, 15, 50, 100]} // 每页显示多少条\n          onChange={onChangePage} // 监听pageSize回调\n          showSizeChanger // 展示 pageSize 切换器\n          showQuickJumper // 快速跳转至某页\n          showTotal={total => `共有 ${total} 条数据`} // 展示页码\n        />\n      </ConfigProvider >\n    </div>\n  )\n}\nexport default MyPagination\n","import React, { useContext, useEffect, useRef, useState } from 'react';\nimport { Button, Form, FormInstance, Input, InputRef, message, Modal, Table } from 'antd';\nimport type { ColumnsType } from 'antd/es/table';\nimport { DeleteOutlined, ExclamationCircleOutlined } from '@ant-design/icons';\nimport { connect } from 'react-redux';\nimport { Dispatch, bindActionCreators } from 'redux';\nimport * as BlogActions from '@/redux/actionCreator';\nimport MyPagination from '@/components/pagination';\nimport dayjs from 'dayjs';\nimport jwtDecode from 'jwt-decode';\nimport { handleNotAdd, handleNotDelete, handleNotUpdate } from '@/utils/prompt';\nconst { confirm } = Modal;\nconst { Search } = Input;\ninterface DataType {\n  key?: React.Key;\n  _id: string;\n  name: string;\n  articleNum: Number;\n  createTime: string;\n  updateTime: string;\n}\ninterface CategoryData {\n  data: {\n    data: DataType[];\n    totalCount: number;\n    page: number;\n    pageSize: number;\n  };\n}\nconst EditableContext = React.createContext<FormInstance<any> | null>(null);\ninterface EditableRowProps {\n  index: number;\n}\nconst EditableRow: React.FC<EditableRowProps> = ({ index, ...props }) => {\n  const [form] = Form.useForm();\n  return (\n    <Form form={form} component={false}>\n      <EditableContext.Provider value={form}>\n        <tr {...props} />\n      </EditableContext.Provider>\n    </Form>\n  );\n};\n\ninterface EditableCellProps {\n  title: React.ReactNode;\n  editable: boolean;\n  children: React.ReactNode;\n  dataIndex: keyof DataType;\n  record: DataType;\n  handleSave: (record: DataType) => void;\n}\n\nconst EditableCell: React.FC<EditableCellProps> = ({\n  title,\n  editable,\n  children,\n  dataIndex,\n  record,\n  handleSave,\n  ...restProps\n}) => {\n  const [editing, setEditing] = useState(false);\n  const inputRef = useRef<InputRef>(null);\n  const form = useContext(EditableContext)!;\n\n  useEffect(() => {\n    if (editing) {\n      inputRef.current!.focus();\n    }\n  }, [editing]);\n\n  const toggleEdit = () => {\n    setEditing(!editing);\n    form.setFieldsValue({ [dataIndex]: record[dataIndex] });\n  };\n\n  const save = async () => {\n    try {\n      const values = await form.validateFields();\n\n      toggleEdit();\n      handleSave({ ...record, ...values });\n    } catch (errInfo) {\n      return errInfo;\n    }\n  };\n\n  let childNode = children;\n\n  if (editable) {\n    childNode = editing ? (\n      <Form.Item\n        style={{ margin: 0 }}\n        name={dataIndex}\n        rules={[\n          {\n            required: true,\n            message: `${title} is required.`,\n          },\n        ]}\n      >\n        <Input ref={inputRef} onPressEnter={save} onBlur={save} />\n      </Form.Item>\n    ) : (\n      <div className=\"editable-cell-value-wrap\" style={{ paddingRight: 24 }} onClick={toggleEdit}>\n        {children}\n      </div>\n    );\n  }\n\n  return <td {...restProps}>{childNode}</td>;\n};\n\ninterface DataType {\n  key?: React.Key;\n  name: string;\n}\nconst ArticleCategory = (props: any) => {\n  const token = jwtDecode(localStorage.getItem('token') as string) as object | any;\n  const role_type = token[0].role[0].role_type\n  // 保存\n  const handleSave = (record: DataType) => {\n    let rawData = list.map((item: DataType) => {\n      if (item._id === record._id) {\n        return {\n          _id: item._id,\n          name: record.name,\n          articleNum: record.articleNum,\n          createTime: record.createTime,\n          updateTime: record.updateTime,\n        };\n      }\n      return item;\n    });\n    setList(rawData);\n    // message.success(\"更新成功\")\n    // 执行更新\n    props.BlogActions.asyncCategoryUpdateAction({\n      name: record.name,\n      id: record._id,\n    }).then(() => {\n      // 刷新列表数据\n      props.BlogActions.asyncCategoriesAction(currentPage, pageSize, '').then((res: CategoryData) => {\n        // 获取分类\n        let { data, totalCount, page, pageSize } = res.data;\n\n        setList(data);\n        setTotal(totalCount);\n        setCurrentPage(page);\n        setPageSize(pageSize);\n      });\n    });\n  };\n  const columns: ColumnsType<DataType> = [\n    {\n      title: '分类名称(点击可编辑)',\n      dataIndex: 'name',\n      key: 'name',\n      width: '20rem',\n      onCell: (record: DataType) => ({\n        record,\n        editable: true,\n        dataIndex: 'name',\n        title: '分类名称',\n        handleSave: role_type ? handleNotUpdate : handleSave,\n      }),\n    },\n    {\n      title: '文章数量',\n      dataIndex: 'articleNum',\n      key: 'articleNum',\n      width: '10rem'\n    },\n    {\n      title: '创建时间',\n      dataIndex: 'createTime',\n      key: 'createTime',\n      render: time => {\n        return time && dayjs(time * 1000).format('YYYY-MM-DD HH:mm:ss');\n      },\n    },\n    {\n      title: '更新时间',\n      dataIndex: 'updateTime',\n      key: 'updateTime',\n      render: time => {\n        return time && dayjs(time * 1000).format('YYYY-MM-DD HH:mm:ss');\n      },\n    },\n    {\n      title: '操作',\n      key: 'action',\n      render: item => {\n        return (\n          <div>\n            <Button\n              type=\"primary\"\n              danger\n              shape=\"circle\"\n              icon={<DeleteOutlined />}\n              onClick={() => {\n                categoryDelete(item);\n              }}\n              style={{ marginRight: '5px' }}\n            />\n          </div>\n        );\n      },\n    },\n  ];\n  // 表单数据\n  const [form] = Form.useForm();\n  // 分类列表\n  const [list, setList] = useState<DataType[]>([]);\n  // 分页总数\n  const [total, setTotal] = useState(0);\n  // 当前第几页\n  const [currentPage, setCurrentPage] = useState(1);\n  // 每页显示条数\n  const [pageSize, setPageSize] = useState(15);\n  // 窗口\n  const [isModalOpen, setIsModalOpen] = useState(false);\n\n  // 获取分类列表数据\n  useEffect(() => {\n    props.BlogActions.asyncCategoriesAction(currentPage, pageSize, '').then((res: CategoryData) => {\n      // 获取分类\n      let { data, totalCount, page, pageSize } = res.data;\n      setList(data);\n      setTotal(totalCount);\n      setCurrentPage(page);\n      setPageSize(pageSize);\n    });\n  }, [currentPage, pageSize, props.BlogActions]);\n\n  // 新增分类\n  const showModal = () => {\n    setIsModalOpen(true);\n  };\n  // 点击确定按钮\n  const handleConfirm = async () => {\n    if (role_type) {\n      return handleNotAdd()\n    }\n    // 校验form值 校验通过后获取值\n    await form.validateFields();\n    // 获取表单值\n    const data = form.getFieldsValue();\n    message.success('分类新增成功');\n    form.resetFields();\n    setIsModalOpen(false);\n    props.BlogActions.asyncCategoryAddAction({\n      name: data.title,\n    }).then(() => {\n      // 重新调用查询接口\n      props.BlogActions.asyncCategoriesAction(currentPage, pageSize, '').then((res: CategoryData) => {\n        let { data } = res.data;\n        setList(data);\n      });\n    });\n  };\n  // 关闭窗口\n  const handleCancel = () => {\n    form.resetFields();\n    setIsModalOpen(false);\n  };\n  // 删除分类\n  const categoryDelete = (item: { _id: string; }) => {\n    confirm({\n      title: '你确定要删除吗?',\n      icon: <ExclamationCircleOutlined />,\n      onOk() {\n        if (role_type) {\n          return handleNotDelete();\n        }\n        props.BlogActions.asyncCategoryDeleteAction(item._id).then((res: { code: number; } | undefined) => {\n          if (res === undefined) {\n            message.error('分类删除失败,请稍后再试');\n            return false;\n          }\n          if (res.code === 40001) {\n            message.error('文章中有关联该分类信息，请解绑后再次执行删除操作');\n            return false;\n          }\n\n          // 先将要删除的数据过滤掉再调用接口\n          setList(list.filter((it: { _id: string | undefined }) => it._id !== item._id));\n          message.success('分类删除成功');\n          props.BlogActions.asyncCategoriesAction(currentPage, pageSize, '').then((res: CategoryData) => {\n            // 获取分类\n            let { data, totalCount, page, pageSize } = res.data;\n            setList(data);\n            setTotal(totalCount);\n            setCurrentPage(page);\n            setPageSize(pageSize);\n          });\n        });\n      },\n    });\n  };\n  // 搜索\n  const onSearch = (value: string) => {\n    props.BlogActions.asyncCategoriesAction(currentPage, pageSize, value).then((res: CategoryData) => {\n      let { data, totalCount, page, pageSize } = res.data;\n      setList(data);\n      setTotal(totalCount);\n      setCurrentPage(page);\n      setPageSize(pageSize);\n    });\n  };\n  // 跳转页数据显示\n  const onChangePage = (page: number, pageSize: number, params = '') => {\n    // 重新调用接口将参数传递过去\n    props.BlogActions.asyncCategoriesAction(page, pageSize, params).then((res: CategoryData) => {\n      // 获取列表数据\n      let { data } = res.data;\n      setList(data);\n      // 切换行\n      setCurrentPage(page);\n      // 根据页面数据显示页码\n      setPageSize(pageSize);\n    });\n  };\n  return (\n    <div>\n      <div className=\"title\">\n        <Button type=\"primary\" onClick={showModal} className=\"btn\">\n          添加分类\n        </Button>\n        <Search\n          className=\"search\"\n          allowClear\n          placeholder=\"请输入分类名称\"\n          onSearch={onSearch}\n          enterButton\n        />\n      </div>\n      <Modal\n        open={isModalOpen}\n        title={<div style={{ textAlign: 'left' }}>添加分类</div>}\n        okText=\"新增\"\n        cancelText=\"取消\"\n        onCancel={handleCancel}\n        onOk={() => {\n          handleConfirm();\n        }}\n      >\n        <Form form={form} layout=\"vertical\" name=\"basic\" className=\"userAddFrom\">\n          <Form.Item\n            name=\"title\"\n            label=\"名称\"\n            rules={[{ required: true, message: '分类名称不能为空' }]}\n          >\n            <Input placeholder=\"请输入分类名称\" />\n          </Form.Item>\n        </Form>\n      </Modal>\n      <Table\n        columns={columns}\n        dataSource={list}\n        scroll={{ y: 'calc(100vh - 240px)', x: true }}\n        rowKey={(item) => {\n          return item._id + Date.now();\n        }}\n        pagination={false}\n        components={{\n          body: {\n            row: EditableRow,\n            cell: EditableCell,\n          },\n        }}\n      />\n      <MyPagination\n        pageSize={pageSize}\n        currentPage={currentPage}\n        total={total}\n        onChange={onChangePage}\n      ></MyPagination>\n    </div>\n  );\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch) => {\n  return {\n    BlogActions: bindActionCreators(BlogActions, dispatch),\n  };\n};\nexport default connect(null, mapDispatchToProps)(ArticleCategory);\n","import { message } from 'antd';\n\n// 禁止操作项\nexport const handleNotDelete = () => {\n  return message.warning('访客暂不支持删除操作😅');\n};\nexport const handleNotUpdate = () => {\n  return message.warning('访客暂不支持更新操作😅');\n};\nexport const handleNotAdd = () => {\n  return message.warning('访客暂不支持添加操作😅');\n};\nexport const handleNotAudit = () => {\n  return message.warning('访客暂不支持审批操作😅');\n};\nexport const handleNotAllAudit = () => {\n  return message.warning('访客暂不支持一键审批操作😅');\n};\nexport const onNotChangePublishStatus = () => {\n  return message.warning('访客暂不支持下线文章操作😅');\n};\nexport const onNotChangePublishLineStatus = () => {\n  return message.warning('访客暂不支持上线文章操作😅');\n};\nexport const onNotChangeStatus = () => {\n  return message.warning('访客暂不支持置顶操作😅');\n};\nexport const handleNotChangeStatus = () => {\n  return message.warning('访客暂不支持状态变更操作😅');\n};\nexport const handleNotSave = () => {\n  return message.warning('访客暂不支持发布操作😅');\n};\nexport const handleNotSaveArticle = () => {\n  return message.warning('访客暂不支持发布文章操作😅');\n};\nexport const handleNotSaveDraft = () => {\n  return message.warning('访客暂不支持保存草稿操作😅');\n};\nexport const handleNotUpload = () => {\n  return message.warning('访客暂不支持上传图片操作😅');\n};\nexport const handleNotLike = () => {\n  return message.warning('访客暂不支持输入图片链接操作😅');\n};\n"],"names":["props","total","setTotal","useState","currentPage","setCurrentPage","pageSize","setPageSize","useEffect","locale","zhCN","style","textAlign","paddingTop","borderTop","current","pageSizeOptions","onChange","page","showSizeChanger","showQuickJumper","showTotal","confirm","Modal","Search","Input","EditableContext","React","EditableRow","index","form","Form","component","Provider","value","EditableCell","title","editable","children","dataIndex","record","handleSave","restProps","editing","setEditing","inputRef","useRef","useContext","focus","toggleEdit","setFieldsValue","save","async","values","validateFields","errInfo","childNode","margin","name","rules","required","message","ref","onPressEnter","onBlur","className","paddingRight","onClick","connect","dispatch","BlogActions","bindActionCreators","role_type","jwtDecode","localStorage","getItem","role","rawData","list","map","item","_id","articleNum","createTime","updateTime","setList","asyncCategoryUpdateAction","id","then","asyncCategoriesAction","res","data","totalCount","columns","key","width","onCell","handleNotUpdate","render","time","dayjs","format","type","danger","shape","icon","categoryDelete","marginRight","isModalOpen","setIsModalOpen","onOk","handleNotDelete","asyncCategoryDeleteAction","undefined","code","filter","it","allowClear","placeholder","onSearch","enterButton","open","okText","cancelText","onCancel","resetFields","handleNotAdd","getFieldsValue","asyncCategoryAddAction","handleConfirm","layout","label","dataSource","scroll","y","x","rowKey","Date","now","pagination","components","body","row","cell","params","handleNotAudit","handleNotAllAudit","onNotChangePublishStatus","onNotChangePublishLineStatus","onNotChangeStatus","handleNotChangeStatus","handleNotSave","handleNotSaveArticle","handleNotSaveDraft","handleNotUpload","handleNotLike"],"sourceRoot":""}