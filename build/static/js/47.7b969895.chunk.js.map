{"version":3,"file":"static/js/47.7b969895.chunk.js","mappings":"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","sources":["components/pagination/index.tsx","pages/navigation_category/index.tsx","utils/prompt.ts"],"sourcesContent":["import { ConfigProvider, Pagination } from 'antd'\nimport React, { useEffect, useState } from 'react'\nimport zhCN from 'antd/es/locale/zh_CN';\nconst MyPagination = (props: any) => {\n  // 分页总数\n  const [total, setTotal] = useState(0)\n  // 当前第几页\n  const [currentPage, setCurrentPage] = useState(0)\n  // 每页显示条数\n  const [pageSize, setPageSize] = useState(0)\n  useEffect(() => {\n    setTotal(props.total)\n    setCurrentPage(props.currentPage)\n    setPageSize(props.pageSize)\n  }, [props])\n\n  const onChangePage = (page: number, pageSize: number) => {\n    // 将切换的页码参数传递过去\n    props.onChange(page, pageSize)\n  }\n  return (\n    <div>\n      {/* 中文语言包 */}\n      < ConfigProvider locale={zhCN} >\n        <Pagination\n          style={{ textAlign: 'center', paddingTop: '10px', borderTop: '2px solid #fafafa' }}\n          current={currentPage} // 当前页\n          pageSize={pageSize} // 每页条数\n          total={total} // 数据总数\n          pageSizeOptions={[5, 15, 50, 100]} // 每页显示多少条\n          onChange={onChangePage} // 监听pageSize回调\n          showSizeChanger // 展示 pageSize 切换器\n          showQuickJumper // 快速跳转至某页\n          showTotal={total => `共有 ${total} 条数据`} // 展示页码\n        />\n      </ConfigProvider >\n    </div>\n  )\n}\nexport default MyPagination\n","import React, { useEffect, useState } from 'react';\nimport { Button, Form, Input, InputNumber, message, Modal, Table } from 'antd';\nimport type { ColumnsType } from 'antd/es/table';\nimport { DeleteOutlined, ExclamationCircleOutlined, EditOutlined } from '@ant-design/icons';\nimport { connect } from 'react-redux';\nimport { Dispatch, bindActionCreators } from 'redux';\nimport * as BlogActions from '@/redux/actionCreator';\nimport MyPagination from '@/components/pagination';\nimport dayjs from 'dayjs';\nimport jwtDecode from 'jwt-decode';\nimport { handleNotAdd, handleNotDelete, handleNotUpdate } from '@/utils/prompt';\nconst { confirm } = Modal;\nconst { Search } = Input;\ninterface DataType {\n  key?: React.Key;\n  _id: string;\n  name: string;\n  createTime: string;\n  updateTime: string;\n}\ninterface CategoryData {\n  index: any;\n  name: any;\n  data: {\n    data: DataType[];\n    totalCount: number;\n    page: number;\n    pageSize: number;\n  };\n}\nconst NavigationCategory = (props: any) => {\n  const token = jwtDecode(localStorage.getItem('token') as string) as object | any;\n  const role_type = token[0].role[0].role_type\n\n  const columns: ColumnsType<DataType> = [\n    {\n      title: '分类名称',\n      dataIndex: 'name',\n      width: '20rem',\n    },\n    {\n      title: '分类索引',\n      dataIndex: 'index',\n      key: 'index',\n      width: '20rem',\n    },\n    {\n      title: '网站数量',\n      dataIndex: 'navigationNum',\n      key: 'navigationNum',\n      width: '20rem',\n    },\n    {\n      title: '创建时间',\n      dataIndex: 'createTime',\n      key: 'createTime',\n      render: time => {\n        return time && dayjs(time * 1000).format('YYYY-MM-DD HH:mm:ss');\n      },\n    },\n    {\n      title: '更新时间',\n      dataIndex: 'updateTime',\n      key: 'updateTime',\n      render: time => {\n        return time && dayjs(time * 1000).format('YYYY-MM-DD HH:mm:ss');\n      },\n    },\n    {\n      title: '操作',\n      key: 'action',\n      className: 'handle_btn',\n      render: item => {\n        return (\n          <div>\n            <Button\n              type=\"primary\"\n              danger\n              shape=\"circle\"\n              icon={<DeleteOutlined />}\n              onClick={() => {\n                categoryDelete(item);\n              }}\n              style={{ marginRight: '5px' }}\n            />\n            <Button\n              type=\"primary\"\n              ghost\n              shape=\"circle\"\n              icon={<EditOutlined />}\n              onClick={() => {\n                categoryUpdate(item);\n              }}\n              style={{ marginRight: '5px' }}\n            />\n          </div>\n        );\n      },\n    },\n  ];\n  // 表单数据\n  const [form] = Form.useForm();\n  // 更新表单\n  const [updateForm] = Form.useForm();\n  // 分类列表\n  const [list, setList] = useState<DataType[]>([]);\n  // 分页总数\n  const [total, setTotal] = useState(0);\n  // 当前第几页\n  const [currentPage, setCurrentPage] = useState(1);\n  // 每页显示条数\n  const [pageSize, setPageSize] = useState(15);\n  // 窗口\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  // 更新窗口\n  const [isModalUpdateOpen, setIsModalUpdateOpen] = useState(false);\n  // 更新的数据\n  const [editItems, setEditItems] = useState<any>([])\n  // 获取分类列表数据\n  useEffect(() => {\n    props.BlogActions.asyncNavigationCategoriesAction(currentPage, pageSize, '').then((res: CategoryData) => {\n      // 获取分类\n      let { data, totalCount, page, pageSize } = res.data;\n      setList(data);\n      setTotal(totalCount);\n      setCurrentPage(page);\n      setPageSize(pageSize);\n    });\n  }, [currentPage, pageSize, props.BlogActions]);\n\n  // 新增分类\n  const showModal = () => {\n    setIsModalOpen(true);\n  };\n\n  // 点击确定按钮\n  const handleConfirm = async () => {\n    if (role_type) {\n      return handleNotAdd()\n    }\n    // 校验form值 校验通过后获取值\n    await form.validateFields();\n    // 获取表单值\n    const data = form.getFieldsValue();\n    props.BlogActions.asyncNavigationCategoryAddAction({\n      name: data.title,\n      index: data.index,\n    }).then(() => {\n      message.success('分类新增成功');\n      form.resetFields();\n      setIsModalOpen(false);\n      // 重新调用查询接口\n      props.BlogActions.asyncNavigationCategoriesAction(currentPage, pageSize, '').then((res: CategoryData) => {\n        let { data } = res.data;\n        setList(data);\n      });\n    });\n  };\n  // 点击更新\n  const categoryUpdate = (item: CategoryData) => {\n    updateForm.setFieldsValue({ name: item.name, index: item.index });\n    setIsModalUpdateOpen(true);\n    setEditItems(item)\n  };\n  // 更新操作\n  const handleUpdateConfirm = () => {\n    if (role_type) {\n      return handleNotUpdate();\n    }\n    let value = updateForm.getFieldsValue();\n    // 执行更新\n    props.BlogActions.asyncNavigationCategoryUpdateAction({\n      name: value.name,\n      index: value.index,\n      id: editItems._id,\n    }).then(() => {\n      message.success(\"导航分类更新成功\")\n      // 刷新列表数据\n      props.BlogActions.asyncNavigationCategoriesAction(currentPage, pageSize, '').then((res: CategoryData) => {\n        // 获取分类\n        let { data, totalCount, page, pageSize } = res.data;\n        setList(data);\n        setTotal(totalCount);\n        setCurrentPage(page);\n        setPageSize(pageSize);\n      });\n    });\n    updateForm.resetFields();\n    setIsModalUpdateOpen(false);\n  };\n  // 关闭窗口\n  const handleCancel = () => {\n    form.resetFields();\n    setIsModalOpen(false);\n  };\n  // 关闭窗口\n  const handleUpdateCancel = () => {\n    updateForm.resetFields();\n    setIsModalUpdateOpen(false);\n  };\n  // 删除分类\n  const categoryDelete = (item: { _id: string; }) => {\n    confirm({\n      title: '你确定要删除吗?',\n      icon: <ExclamationCircleOutlined />,\n      onOk() {\n        if (role_type) {\n          return handleNotDelete();\n        }\n        props.BlogActions.asyncNavigationCategoryDeleteAction(item._id).then((res: { code: number; } | undefined) => {\n          if (res === undefined) {\n            message.error('分类删除失败,请稍后再试');\n            return false;\n          }\n          if (res.code === 40001) {\n            message.error('导航中有关联该分类信息，请解绑后再次执行删除操作');\n            return false;\n          }\n\n          // 先将要删除的数据过滤掉再调用接口\n          setList(list.filter((it: { _id: string | undefined }) => it._id !== item._id));\n          message.success('分类删除成功');\n          props.BlogActions.asyncNavigationCategoriesAction(currentPage, pageSize, '').then((res: CategoryData) => {\n            // 获取分类\n            let { data, totalCount, page, pageSize } = res.data;\n            setList(data);\n            setTotal(totalCount);\n            setCurrentPage(page);\n            setPageSize(pageSize);\n          });\n        });\n      },\n    });\n  };\n  // 搜索\n  const onSearch = (value: string) => {\n    props.BlogActions.asyncNavigationCategoriesAction(currentPage, pageSize, value).then((res: CategoryData) => {\n      let { data, totalCount, page, pageSize } = res.data;\n      setList(data);\n      setTotal(totalCount);\n      setCurrentPage(page);\n      setPageSize(pageSize);\n    });\n  };\n  // 跳转页数据显示\n  const onChangePage = (page: number, pageSize: number, params = '') => {\n    // 重新调用接口将参数传递过去\n    props.BlogActions.asyncNavigationCategoriesAction(page, pageSize, params).then((res: CategoryData) => {\n      // 获取列表数据\n      let { data } = res.data;\n      setList(data);\n      // 切换行\n      setCurrentPage(page);\n      // 根据页面数据显示页码\n      setPageSize(pageSize);\n    });\n  };\n  return (\n    <div>\n      <div className=\"title\">\n        <Button type=\"primary\" onClick={showModal} className=\"btn\">\n          添加分类\n        </Button>\n        <Search\n          className=\"search\"\n          allowClear\n          placeholder=\"请输入分类名称\"\n          onSearch={onSearch}\n          enterButton\n        />\n      </div>\n      <Modal\n        open={isModalOpen}\n        title={<div style={{ textAlign: 'left' }}>添加分类</div>}\n        okText=\"新增\"\n        cancelText=\"取消\"\n        onCancel={handleCancel}\n        onOk={() => {\n          handleConfirm();\n        }}\n      >\n        <Form form={form} layout=\"vertical\" name=\"basic\" className=\"userAddFrom\">\n          <Form.Item\n            name=\"title\"\n            label=\"名称\"\n            rules={[{ required: true, message: '分类名称不能为空' }]}\n          >\n            <Input placeholder=\"请输入分类名称\" />\n          </Form.Item>\n          <Form.Item\n            name=\"index\"\n            label=\"分类索引\"\n            rules={[{ required: true, message: '分类索引不能为空' }]}\n          >\n            <InputNumber min={1} max={500} />\n          </Form.Item>\n        </Form>\n      </Modal>\n      {/* 更新操作 */}\n      <Modal\n        open={isModalUpdateOpen}\n        title={<div style={{ textAlign: 'left' }}>更新书籍</div>}\n        okText=\"更新\"\n        cancelText=\"取消\"\n        onCancel={handleUpdateCancel}\n        onOk={() => {\n          handleUpdateConfirm();\n        }}\n      >\n        <Form form={updateForm} layout=\"vertical\" name=\"basic\" className=\"userAddFrom\">\n          <Form.Item\n            name=\"name\"\n            label=\"名称\"\n            rules={[{ required: true, message: '分类名称不能为空' }]}\n          >\n            <Input placeholder=\"请输入分类名称\" />\n          </Form.Item>\n          <Form.Item\n            name=\"index\"\n            label=\"分类索引\"\n            rules={[{ required: true, message: '分类索引不能为空' }]}\n          >\n            <InputNumber min={1} max={500} />\n          </Form.Item>\n        </Form>\n      </Modal>\n      <Table\n        columns={columns}\n        dataSource={list}\n        scroll={{ y: 'calc(100vh - 240px)', x: true }}\n        rowKey={(item) => {\n          return item._id + Date.now();\n        }}\n        pagination={false}\n      />\n      <MyPagination\n        pageSize={pageSize}\n        currentPage={currentPage}\n        total={total}\n        onChange={onChangePage}\n      ></MyPagination>\n    </div>\n  );\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch) => {\n  return {\n    BlogActions: bindActionCreators(BlogActions, dispatch),\n  };\n};\nexport default connect(null, mapDispatchToProps)(NavigationCategory);\n","import { message } from 'antd';\n\n// 禁止操作项\nexport const handleNotDelete = () => {\n  return message.warning('访客暂不支持删除操作😅');\n};\nexport const handleNotUpdate = () => {\n  return message.warning('访客暂不支持更新操作😅');\n};\nexport const handleNotAdd = () => {\n  return message.warning('访客暂不支持添加操作😅');\n};\nexport const handleNotAudit = () => {\n  return message.warning('访客暂不支持审批操作😅');\n};\nexport const handleNotAllAudit = () => {\n  return message.warning('访客暂不支持一键审批操作😅');\n};\nexport const onNotChangePublishStatus = () => {\n  return message.warning('访客暂不支持下线文章操作😅');\n};\nexport const onNotChangePublishLineStatus = () => {\n  return message.warning('访客暂不支持上线文章操作😅');\n};\nexport const onNotChangeStatus = () => {\n  return message.warning('访客暂不支持置顶操作😅');\n};\nexport const handleNotChangeStatus = () => {\n  return message.warning('访客暂不支持状态变更操作😅');\n};\nexport const handleNotSave = () => {\n  return message.warning('访客暂不支持发布操作😅');\n};\nexport const handleNotSaveArticle = () => {\n  return message.warning('访客暂不支持发布文章操作😅');\n};\nexport const handleNotSaveDraft = () => {\n  return message.warning('访客暂不支持保存草稿操作😅');\n};\nexport const handleNotUpload = () => {\n  return message.warning('访客暂不支持上传图片操作😅');\n};\nexport const handleNotLike = () => {\n  return message.warning('访客暂不支持输入图片链接操作😅');\n};\n"],"names":["props","total","setTotal","useState","currentPage","setCurrentPage","pageSize","setPageSize","useEffect","locale","zhCN","style","textAlign","paddingTop","borderTop","current","pageSizeOptions","onChange","page","showSizeChanger","showQuickJumper","showTotal","confirm","Modal","Search","Input","connect","dispatch","BlogActions","bindActionCreators","role_type","jwtDecode","localStorage","getItem","role","columns","title","dataIndex","width","key","render","time","dayjs","format","className","item","type","danger","shape","icon","onClick","categoryDelete","marginRight","ghost","categoryUpdate","form","Form","updateForm","list","setList","isModalOpen","setIsModalOpen","isModalUpdateOpen","setIsModalUpdateOpen","editItems","setEditItems","asyncNavigationCategoriesAction","then","res","data","totalCount","setFieldsValue","name","index","onOk","handleNotDelete","asyncNavigationCategoryDeleteAction","_id","undefined","message","code","filter","it","allowClear","placeholder","onSearch","value","enterButton","open","okText","cancelText","onCancel","resetFields","async","handleNotAdd","validateFields","getFieldsValue","asyncNavigationCategoryAddAction","handleConfirm","layout","label","rules","required","min","max","handleNotUpdate","asyncNavigationCategoryUpdateAction","id","handleUpdateConfirm","dataSource","scroll","y","x","rowKey","Date","now","pagination","params","handleNotAudit","handleNotAllAudit","onNotChangePublishStatus","onNotChangePublishLineStatus","onNotChangeStatus","handleNotChangeStatus","handleNotSave","handleNotSaveArticle","handleNotSaveDraft","handleNotUpload","handleNotLike"],"sourceRoot":""}