{"version":3,"file":"static/js/338.a842447e.chunk.js","mappings":"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","sources":["components/pagination/index.tsx","pages/category/index.tsx"],"sourcesContent":["import { ConfigProvider, Pagination } from 'antd'\nimport React, { useEffect, useState } from 'react'\nimport zhCN from 'antd/es/locale/zh_CN';\nconst MyPagination = (props: any) => {\n  // 分页总数\n  const [total, setTotal] = useState(0)\n  // 当前第几页\n  const [currentPage, setCurrentPage] = useState(0)\n  // 每页显示条数\n  const [pageSize, setPageSize] = useState(0)\n  useEffect(() => {\n    setTotal(props.total)\n    setCurrentPage(props.currentPage)\n    setPageSize(props.pageSize)\n  }, [props])\n\n  const onChangePage = (page: number, pageSize: number) => {\n    // 将切换的页码参数传递过去\n    props.onChange(page, pageSize)\n  }\n  return (\n    <div>\n      {/* 中文语言包 */}\n      < ConfigProvider locale={zhCN} >\n        <Pagination\n          style={{ marginTop: \"10px\" }}\n          current={currentPage} // 当前页\n          pageSize={pageSize} // 每页条数\n          total={total} // 数据总数\n          pageSizeOptions={[5, 10, 50, 100]} // 每页显示多少条\n          onChange={onChangePage} // 监听pageSize回调\n          showSizeChanger // 展示 pageSize 切换器\n          showQuickJumper // 快速跳转至某页\n          showTotal={total => `共有 ${total} 条数据`} // 展示页码\n        />\n      </ConfigProvider >\n    </div>\n  )\n}\nexport default MyPagination\n","import React, { useContext, useEffect, useRef, useState } from 'react';\nimport { Button, Form, FormInstance, Input, InputRef, message, Modal, Table } from 'antd';\nimport type { ColumnsType } from 'antd/es/table';\nimport { DeleteOutlined, ExclamationCircleOutlined } from '@ant-design/icons';\nimport { connect } from 'react-redux';\nimport { Dispatch, bindActionCreators } from 'redux';\nimport * as BlogActions from '@/redux/actionCreator';\nimport MyPagination from '@/components/pagination';\nimport './index.less';\nimport dayjs from 'dayjs';\nimport jwtDecode from 'jwt-decode';\nconst { confirm } = Modal;\nconst { Search } = Input;\ninterface DataType {\n  key?: React.Key;\n  _id: string;\n  name: string;\n  articleNum: Number;\n  createTime: string;\n  updateTime: string;\n}\ninterface CategoryData {\n  data: {\n    data: DataType[];\n    totalCount: number;\n    page: number;\n    pageSize: number;\n  };\n}\nconst EditableContext = React.createContext<FormInstance<any> | null>(null);\ninterface EditableRowProps {\n  index: number;\n}\nconst EditableRow: React.FC<EditableRowProps> = ({ index, ...props }) => {\n  const [form] = Form.useForm();\n  return (\n    <Form form={form} component={false}>\n      <EditableContext.Provider value={form}>\n        <tr {...props} />\n      </EditableContext.Provider>\n    </Form>\n  );\n};\n\ninterface EditableCellProps {\n  title: React.ReactNode;\n  editable: boolean;\n  children: React.ReactNode;\n  dataIndex: keyof DataType;\n  record: DataType;\n  handleSave: (record: DataType) => void;\n}\n\nconst EditableCell: React.FC<EditableCellProps> = ({\n  title,\n  editable,\n  children,\n  dataIndex,\n  record,\n  handleSave,\n  ...restProps\n}) => {\n  const [editing, setEditing] = useState(false);\n  const inputRef = useRef<InputRef>(null);\n  const form = useContext(EditableContext)!;\n\n  useEffect(() => {\n    if (editing) {\n      inputRef.current!.focus();\n    }\n  }, [editing]);\n\n  const toggleEdit = () => {\n    setEditing(!editing);\n    form.setFieldsValue({ [dataIndex]: record[dataIndex] });\n  };\n\n  const save = async () => {\n    try {\n      const values = await form.validateFields();\n\n      toggleEdit();\n      handleSave({ ...record, ...values });\n    } catch (errInfo) {\n      return errInfo;\n    }\n  };\n\n  let childNode = children;\n\n  if (editable) {\n    childNode = editing ? (\n      <Form.Item\n        style={{ margin: 0 }}\n        name={dataIndex}\n        rules={[\n          {\n            required: true,\n            message: `${title} is required.`,\n          },\n        ]}\n      >\n        <Input ref={inputRef} onPressEnter={save} onBlur={save} />\n      </Form.Item>\n    ) : (\n      <div className=\"editable-cell-value-wrap\" style={{ paddingRight: 24 }} onClick={toggleEdit}>\n        {children}\n      </div>\n    );\n  }\n\n  return <td {...restProps}>{childNode}</td>;\n};\n\ninterface DataType {\n  key?: React.Key;\n  name: string;\n}\nconst ArticleCategory = (props: any) => {\n  const token = jwtDecode(localStorage.getItem('token') as string) as object | any;\n  const role_type = token[0].role[0].role_type\n  // 保存\n  const handleSave = (record: DataType) => {\n    let rawData = list.map((item: DataType) => {\n      if (item._id === record._id) {\n        return {\n          _id: item._id,\n          name: record.name,\n          articleNum: record.articleNum,\n          createTime: record.createTime,\n          updateTime: record.updateTime,\n        };\n      }\n      return item;\n    });\n    setList(rawData);\n    // message.success(\"更新成功\")\n    // 执行更新\n    props.BlogActions.asyncCategoryUpdateAction({\n      name: record.name,\n      id: record._id,\n    }).then(() => {\n      // 刷新列表数据\n      props.BlogActions.asyncCategoriesAction(currentPage, pageSize, '').then((res: CategoryData) => {\n        // 获取分类\n        let { data, totalCount, page, pageSize } = res.data;\n\n        setList(data);\n        setTotal(totalCount);\n        setCurrentPage(page);\n        setPageSize(pageSize);\n      });\n    });\n  };\n  const columns: ColumnsType<DataType> = [\n    {\n      title: '分类名称(点击可编辑)',\n      dataIndex: 'name',\n      key: 'name',\n      onCell: (record: DataType) => ({\n        record,\n        editable: true,\n        dataIndex: 'name',\n        title: '分类名称',\n        handleSave: handleSave,\n      }),\n    },\n    {\n      title: '文章数量',\n      dataIndex: 'articleNum',\n      key: 'articleNum',\n    },\n    {\n      title: '创建时间',\n      dataIndex: 'createTime',\n      key: 'createTime',\n      render: time => {\n        return time && dayjs(time * 1000).format('YYYY-MM-DD HH:mm:ss');\n      },\n    },\n    {\n      title: '更新时间',\n      dataIndex: 'updateTime',\n      key: 'updateTime',\n      render: time => {\n        return time && dayjs(time * 1000).format('YYYY-MM-DD HH:mm:ss');\n      },\n    },\n    {\n      title: '操作',\n      key: 'action',\n      render: item => {\n        return (\n          <div>\n            <Button\n              type=\"primary\"\n              danger\n              shape=\"circle\"\n              disabled={role_type}\n              icon={<DeleteOutlined />}\n              onClick={() => {\n                categoryDelete(item);\n              }}\n              style={{ marginRight: '5px' }}\n            />\n          </div>\n        );\n      },\n    },\n  ];\n  // 表单数据\n  const [form] = Form.useForm();\n  // 分类列表\n  const [list, setList] = useState<DataType[]>([]);\n  // 分页总数\n  const [total, setTotal] = useState(0);\n  // 当前第几页\n  const [currentPage, setCurrentPage] = useState(1);\n  // 每页显示条数\n  const [pageSize, setPageSize] = useState(10);\n  // 窗口\n  const [isModalOpen, setIsModalOpen] = useState(false);\n\n  // 获取分类列表数据\n  useEffect(() => {\n    props.BlogActions.asyncCategoriesAction(currentPage, pageSize, '').then((res: CategoryData) => {\n      // 获取分类\n      let { data, totalCount, page, pageSize } = res.data;\n      setList(data);\n      setTotal(totalCount);\n      setCurrentPage(page);\n      setPageSize(pageSize);\n    });\n  }, [currentPage, pageSize, props.BlogActions]);\n\n  // 新增分类\n  const showModal = () => {\n    setIsModalOpen(true);\n  };\n  // 点击确定按钮\n  const handleConfirm = async () => {\n    // 校验form值 校验通过后获取值\n    await form.validateFields();\n    // 获取表单值\n    const data = form.getFieldsValue();\n    message.success('分类新增成功');\n    form.resetFields();\n    setIsModalOpen(false);\n    props.BlogActions.asyncCategoryAddAction({\n      name: data.title,\n    }).then(() => {\n      // 重新调用查询接口\n      props.BlogActions.asyncCategoriesAction(currentPage, pageSize, '').then((res: CategoryData) => {\n        let { data } = res.data;\n        setList(data);\n      });\n    });\n  };\n  // 关闭窗口\n  const handleCancel = () => {\n    form.resetFields();\n    setIsModalOpen(false);\n  };\n  // 删除分类\n  const categoryDelete = (item: { _id: string; }) => {\n    confirm({\n      title: '你确定要删除吗?',\n      icon: <ExclamationCircleOutlined />,\n      onOk() {\n        props.BlogActions.asyncCategoryDeleteAction(item._id).then((res: { code: number; } | undefined) => {\n          if (res === undefined) {\n            message.error('分类删除失败,请稍后再试');\n            return false;\n          }\n          if (res.code === 40001) {\n            message.error('文章中有关联该分类信息，请解绑后再次执行删除操作');\n            return false;\n          }\n\n          // 先将要删除的数据过滤掉再调用接口\n          setList(list.filter((it: { _id: string | undefined }) => it._id !== item._id));\n          message.success('分类删除成功');\n          props.BlogActions.asyncCategoriesAction(currentPage, pageSize, '').then((res: CategoryData) => {\n            // 获取分类\n            let { data, totalCount, page, pageSize } = res.data;\n            setList(data);\n            setTotal(totalCount);\n            setCurrentPage(page);\n            setPageSize(pageSize);\n          });\n        });\n      },\n    });\n  };\n  // 搜索\n  const onSearch = (value: string) => {\n    props.BlogActions.asyncCategoriesAction(currentPage, pageSize, value).then((res: CategoryData) => {\n      let { data, totalCount, page, pageSize } = res.data;\n      setList(data);\n      setTotal(totalCount);\n      setCurrentPage(page);\n      setPageSize(pageSize);\n    });\n  };\n  // 跳转页数据显示\n  const onChangePage = (page: number, pageSize: number, params = '') => {\n    // 重新调用接口将参数传递过去\n    props.BlogActions.asyncCategoriesAction(page, pageSize, params).then((res: CategoryData) => {\n      // 获取列表数据\n      let { data } = res.data;\n      setList(data);\n      // 切换行\n      setCurrentPage(page);\n      // 根据页面数据显示页码\n      setPageSize(pageSize);\n    });\n  };\n  return (\n    <div>\n      <div className=\"cate_title\">\n        <Button type=\"primary\" disabled={role_type} onClick={showModal} className=\"btn\">\n          新增分类\n        </Button>\n        <Search\n          className=\"search\"\n          allowClear\n          placeholder=\"请输入分类名称\"\n          onSearch={onSearch}\n          enterButton\n        />\n      </div>\n      <Modal\n        open={isModalOpen}\n        title={<div style={{ textAlign: 'left' }}>添加分类</div>}\n        okText=\"新增\"\n        cancelText=\"取消\"\n        onCancel={handleCancel}\n        onOk={() => {\n          handleConfirm();\n        }}\n      >\n        <Form form={form} layout=\"vertical\" name=\"basic\" className=\"userAddFrom\">\n          <Form.Item\n            name=\"title\"\n            label=\"名称\"\n            rules={[{ required: true, message: '分类名称不能为空' }]}\n          >\n            <Input />\n          </Form.Item>\n        </Form>\n      </Modal>\n      <Table\n        columns={columns}\n        dataSource={list}\n        rowKey={(item) => {\n          return item._id + Date.now();\n        }}\n        pagination={false}\n        components={{\n          body: {\n            row: EditableRow,\n            cell: EditableCell,\n          },\n        }}\n      />\n      <MyPagination\n        pageSize={pageSize}\n        currentPage={currentPage}\n        total={total}\n        onChange={onChangePage}\n      ></MyPagination>\n    </div>\n  );\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch) => {\n  return {\n    BlogActions: bindActionCreators(BlogActions, dispatch),\n  };\n};\nexport default connect(null, mapDispatchToProps)(ArticleCategory);\n"],"names":["props","useState","total","setTotal","currentPage","setCurrentPage","pageSize","setPageSize","useEffect","locale","zhCN","style","marginTop","current","pageSizeOptions","onChange","page","showSizeChanger","showQuickJumper","showTotal","confirm","Modal","Search","Input","EditableContext","React","EditableRow","index","Form","form","component","Provider","value","EditableCell","title","editable","children","dataIndex","record","handleSave","restProps","editing","setEditing","inputRef","useRef","useContext","focus","toggleEdit","setFieldsValue","save","validateFields","values","childNode","margin","name","rules","required","message","ref","onPressEnter","onBlur","className","paddingRight","onClick","connect","dispatch","BlogActions","bindActionCreators","role_type","jwtDecode","localStorage","getItem","role","rawData","list","map","item","_id","articleNum","createTime","updateTime","setList","asyncCategoryUpdateAction","id","then","asyncCategoriesAction","res","data","totalCount","columns","key","onCell","render","time","dayjs","format","type","danger","shape","disabled","icon","DeleteOutlined","categoryDelete","marginRight","isModalOpen","setIsModalOpen","handleConfirm","getFieldsValue","resetFields","asyncCategoryAddAction","ExclamationCircleOutlined","onOk","asyncCategoryDeleteAction","undefined","code","filter","it","allowClear","placeholder","onSearch","enterButton","open","textAlign","okText","cancelText","onCancel","layout","label","dataSource","rowKey","Date","now","pagination","components","body","row","cell","params"],"sourceRoot":""}